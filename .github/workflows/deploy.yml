name: Deploy Strapi

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: strapi-azfa

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Crear archivo PEM temporal
        run: |
          echo "${{ secrets.SSH_PEM_KEY }}" > azfa-rds.pem
          chmod 600 azfa-rds.pem
          echo "📁 Archivo PEM creado:"
          ls -la azfa-rds.pem
          echo "📄 Primeras líneas del archivo PEM:"
          head -3 azfa-rds.pem

      - name: Generar llave pública desde PEM
        run: |
          ssh-keygen -y -f azfa-rds.pem > azfa-rds.pub
          chmod 644 azfa-rds.pub
          echo "🔑 Llave pública generada:"
          ls -la azfa-rds.pub
          echo "📋 Contenido de la llave pública:"
          cat azfa-rds.pub

      - name: Copiar llave al servidor
        run: |
          echo "🔑 Intentando copiar llave al servidor..."
          
          # Configuración SSH más robusta
          SSH_OPTS="-i azfa-rds.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=3"
          
          # Comando a ejecutar en el servidor
          REMOTE_CMD='mkdir -p ~/.ssh && echo "'"$(cat azfa-rds.pub)"'" >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys'
          
          # Intentar conexión con reintentos
          for i in {1..3}; do
            echo "🔄 Intento $i de 3..."
            if ssh $SSH_OPTS ubuntu@18.212.160.100 "$REMOTE_CMD"; then
              echo "✅ Llave copiada exitosamente en intento $i"
              break
            else
              echo "❌ Intento $i falló"
              if [ $i -lt 3 ]; then
                echo "⏳ Esperando 10 segundos antes del siguiente intento..."
                sleep 10
              fi
            fi
          done

      - name: Limpiar archivos temporales
        if: always()
        run: |
          rm -f azfa-rds.pem azfa-rds.pub

      - name: Debugging de red (si falla SSH)
        if: failure()
        run: |
          echo "🚨 SSH falló - Recopilando información de debugging..."
          echo "🌍 Información del runner:"
          echo "   - OS: $(uname -a)"
          echo "   - IP local: $(hostname -I)"
          echo "   - DNS: $(cat /etc/resolv.conf)"
          
          echo "🔍 Verificando conectividad desde el runner:"
          ping -c 3 18.212.160.100 || echo "❌ Ping falló"
          
          echo "📡 Verificando puertos comunes:"
          for port in 22 80 443 1337; do
            echo "   Puerto $port: $(nc -zv 18.212.160.100 $port 2>&1 | head -1 || echo 'No accesible')"
          done

      - name: Verificar conectividad del servidor
        run: |
          echo "🔍 Verificando conectividad al servidor..."
          echo "📍 IP del servidor: 18.212.160.100"
          echo "🔌 Puerto SSH: 22"
          
          # Verificar si el puerto está abierto
          if command -v nc >/dev/null 2>&1; then
            echo "📡 Probando conexión con netcat..."
            timeout 10 nc -zv 18.212.160.100 22 || echo "❌ Puerto 22 no accesible"
          fi
          
          # Verificar con telnet si está disponible
          if command -v telnet >/dev/null 2>&1; then
            echo "📞 Probando conexión con telnet..."
            timeout 10 telnet 18.212.160.100 22 || echo "❌ Telnet falló"
          fi
          
          # Verificar con curl
          echo "🌐 Probando respuesta HTTP..."
          curl -m 10 -I http://18.212.160.100:1337 || echo "❌ HTTP no responde"

      - name: Verificar conexión SSH
        run: |
          echo "🔍 Verificando que la conexión SSH funcione..."
          ssh -i azfa-rds.pem -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ConnectTimeout=10 ubuntu@18.212.160.100 'echo "✅ Conexión SSH exitosa"'

      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Instalar dependencias
        run: npm ci --legacy-peer-deps

      - name: Build de Strapi
        run: npm run build

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          timeout: 300s
          command_timeout: 300s
          script: |
            set -e
            
            echo "🚀 Iniciando deployment..."
            
            # Navegar al directorio del proyecto
            cd ~/azfa-cms-strapi
            
            # Hacer stash de cambios locales si existen
            if ! git diff-index --quiet HEAD --; then
              echo "⚠️  Cambios locales detectados, haciendo stash..."
              git stash push -m "Auto-stash before deployment $(date)"
            fi
            
            # Actualizar código
            echo "📥 Actualizando código desde repositorio..."
            git fetch origin
            git reset --hard origin/main
            
            echo "📦 Instalando dependencias..."
            npm ci --production --silent --legacy-peer-deps
            
            # Build con límite de memoria
            echo "🔨 Construyendo aplicación..."
            NODE_OPTIONS="--max-old-space-size=4096" npm run build
            
            # Verificar configuración del .env
            echo "🔍 Verificando configuración..."
            if [ -f .env ]; then
              echo "✅ Archivo .env encontrado"
              echo "📋 Contenido del .env:"
              cat .env
            else
              echo "❌ Archivo .env no encontrado"
            fi
            
            # Verificar que PM2 esté disponible
            echo "🔧 Verificando PM2..."
            pm2 --version
            
            # Manejar PM2 - reiniciar o iniciar
            echo "🔄 Gestionando proceso PM2..."
            if pm2 describe strapi > /dev/null 2>&1; then
              echo "♻️  Reiniciando aplicación existente..."
              pm2 restart strapi
            else
              echo "🆕 Iniciando nueva aplicación..."
              # Configurar para escuchar en todas las interfaces (0.0.0.0)
              pm2 start npm --name "strapi" -- run start -- --host 0.0.0.0 --port 1337
            fi
            
            # Guardar configuración de PM2
            pm2 save
            
            # Verificar estado
            echo "✅ Estado final de PM2:"
            pm2 list
            
            echo "🎉 Deployment completado exitosamente!"

      - name: Verificar deployment
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            echo "🔍 Verificando que la aplicación esté corriendo..."
            sleep 10
            
            cd ~/azfa-cms-strapi
            pm2 show strapi
            
            # Verificar logs recientes
            echo "📋 Últimos logs:"
            pm2 logs strapi --lines 10 --nostream || true
            
            # Opcional: verificar que el puerto responda
            if command -v curl &> /dev/null; then
              echo "🌐 Verificando respuesta HTTP..."
              sleep 5
              curl -f http://localhost:1337/admin -I || echo "⚠️  La aplicación puede estar iniciando..."
            fi